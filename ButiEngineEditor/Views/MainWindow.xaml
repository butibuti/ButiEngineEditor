<mah:MetroWindow
    
        x:Class="ButiEngineEditor.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ButiEngineEditor.Views"
        xmlns:vm="clr-namespace:ButiEngineEditor.ViewModels"
        xmlns:vDocuments="clr-namespace:ButiEngineEditor.Views.Documents"
        xmlns:vPanes="clr-namespace:ButiEngineEditor.Views.Panes"
        xmlns:vmDocuments="clr-namespace:ButiEngineEditor.ViewModels.Documents"
        xmlns:vmPanes="clr-namespace:ButiEngineEditor.ViewModels.Panes"
        xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls" 
        xmlns:icon="http://metro.mahapps.com/winfx/xaml/iconpacks" 
        xmlns:i1="http://schemas.microsoft.com/xaml/behaviors"
    Title="ButiEngine" Width="720" Height="480" 
        
        NonActiveWindowTitleBrush="White"
        BorderThickness="1" Foreground="Black"  Background="White" SaveWindowPosition="True" ShowDialogsOverTitleBar="True" ShowMinButton="True" ShowMaxRestoreButton="True" WindowTitleBrush="#00000000"
        >

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i1:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i1:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i1:EventTrigger>

        <i1:EventTrigger EventName="Loaded">
            <i1:CallMethodAction MethodName="LayoutLoad" />
        </i1:EventTrigger>
        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i1:EventTrigger EventName="Closed">
            <i1:CallMethodAction MethodName="LayoutSave" />
            <l:DataContextDisposeAction/>
        </i1:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i1:Interaction.Triggers>

    <!-- ====================================================================== -->
    <!-- レイアウトルート -->
    <Grid Margin="3" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- ======== メニュー ======== -->
        <Menu Grid.Row="0">
            <MenuItem Header="Save"  Click="LayoutSave_Click"/>
            <MenuItem Header="Load"  Click="LayoutLoad_Click"/>
            <MenuItem Header="Window">
                <MenuItem Header="Scene Controller" Background="#FFCCCEF5" Click="WindowCreate_SceneController"/>
                <MenuItem Header="FPSMonitor" Background="#FFCCCEF5" Click="WindowCreate_FPSMonitor" />
                <MenuItem Header="Resources" Background="#FFCCCEF5" Click="WindowCreate_Resource"/>
                <MenuItem Header="Material Creater" Background="#FFCCCEF5" Click="WindowCreate_MaterialCreate"/>
                <MenuItem Header="Shader Creater" Background="#FFCCCEF5" Click="WindowCreate_ShaderCreater"/>
                <MenuItem Header="Inspector" Background="#FFCCCEF5" Click="WindowCreate_Inspector"/>
                <MenuItem Header="Hierarchy" Background="#FFCCCEF5" Click="WindowCreate_Hierarchy"/>
                <MenuItem Header="Console" Background="#FFCCCEF5" Click="WindowCreate_Console"/>
                <MenuItem Header="ErrorLog" Background="#FFCCCEF5" Click="WindowCreate_Error"/>
                <MenuItem Header="ButiScript Compiler" Background="#FFCCCEF5" Click="WindowCreate_ButiScriptCompiler"/>
                <MenuItem Header="HLSL Compiler" Background="#FFCCCEF5" Click="WindowCreate_HLSLCompiler"/>
            </MenuItem>

        </Menu>
        <!-- ======== ドッキングエリア ======== -->
        <avalonDock:DockingManager 
            x:Name="_dockingManager" Grid.Row="1" 
            DocumentsSource="{Binding DockingDocumentViewModels}"
            AnchorablesSource="{Binding DockingPaneViewModels}" BorderBrush="#FF8BD5FF" Background="#FFEEE0E0" OpacityMask="Black">
            

            <!-- ======== LayoutItem コンテナ (ウィンドウやタブ) のスタイル ======== -->
            <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                <v:LayoutItemContainerStyleSelector>
                    <!-- Document のスタイル -->
                    <v:LayoutItemTypedStyle DataType="{x:Type vmDocuments:DocumentViewModelBase}">
                        <Style TargetType="{x:Type avalonDock:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}" />
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="CanClose" Value="True" />
                        </Style>
                    </v:LayoutItemTypedStyle>
                    <!-- Pane のスタイル -->
                    <v:LayoutItemTypedStyle DataType="{x:Type vmPanes:PaneViewModelBase}">
                        <Style TargetType="{x:Type avalonDock:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="CanClose" Value="True" />
                        </Style>
                    </v:LayoutItemTypedStyle>
                </v:LayoutItemContainerStyleSelector>
            </avalonDock:DockingManager.LayoutItemContainerStyleSelector>

            <!-- ======== ウィンドウ内容のテンプレート ======== -->
            <avalonDock:DockingManager.LayoutItemTemplateSelector>
                <v:LayoutItemTemplateSelector>
                    <!-- [プロジェクト設定] Document -->
                    <DataTemplate DataType="{x:Type vmDocuments:ProjectSettingDocumentViewModel}">
                        <vDocuments:ProjectSettingDocument />
                    </DataTemplate>
                    <!-- [ソースコード] Document -->
                    <DataTemplate DataType="{x:Type vmDocuments:SourceFileDocumentViewModel}">
                        <vDocuments:SourceFileDocument />
                    </DataTemplate>
                    <!-- [エラー一覧] Pane -->
                    <DataTemplate DataType="{x:Type vmPanes:ErrorListPaneViewModel}">
                        <vPanes:ErrorListPane Background="Black" BorderBrush="Black" OpacityMask="Black" Foreground="Black" />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:ConsoleViewModel}">
                        <vPanes:ConsolePane Background="{x:Null}" BorderBrush="{x:Null}" Foreground="Black" />
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:SceneControllerViewModel}">
                        <vPanes:SceneControllerPane/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:FPSMonitorViewModel}">
                        <vPanes:FPSMonitorPane/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:SceneViewerViewModel}">
                        <vPanes:SceneViewerPane/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:ResourceLoadViewModel}">
                        <vPanes:ResourceLoadView/>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type vmPanes:MaterialCreateViewModel}">
                        <vPanes:MaterialCreateView/>
                    </DataTemplate>
                </v:LayoutItemTemplateSelector>
            </avalonDock:DockingManager.LayoutItemTemplateSelector>
            <avalonDock:DockingManager.LayoutUpdateStrategy>
                <v:LayoutInitializer/>
            </avalonDock:DockingManager.LayoutUpdateStrategy>

        </avalonDock:DockingManager>
    </Grid>
</mah:MetroWindow>
